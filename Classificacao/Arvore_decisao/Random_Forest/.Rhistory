library(quantmod)
# Periodo de analise
start_date <- as.Date("2020-01-01")
end_date<- as.Date("2020-07-13")
# Ativos
tickers <- c("^BVSP", "PETR4.SA")
# Captura dos dados
getSymbols(tickers, src="yahoo", from = start_date, to = end_date)
# Calculando retornos
BVSP_ret = dailyReturn(BVSP)
# Calculando retornos
BVSP_ret = dailyReturn("BVSP")
# Captura dos dados
getSymbols(tickers, src="yahoo", from = start_date, to = end_date)
# Calculando retornos
BVSP_ret = dailyReturn("BVSP")
# Calculando retornos
BVSP_ret = dailyReturn(BVSP)
BVSP_ret
PETR_ret = dailyReturn(PETR.SA)
PETR_ret = dailyReturn(PETR4.SA)
PETR_ret
# funcoes auxiliares
index(BVSP_ret)
coredata(BVSP_ret)
length(BVSP_ret)
length(BVSP_ret(index(PETR4.SA)%in%index(BVSP_ret)))
# Plotar os mesmos dias dos rtornos
BVSP_same <- BVSP_ret(index(BVSP_ret)%in%index(PETR4.SA))
length(BVSP_ret(index(PETR4.SA)%in%index(BVSP_ret)))
length(BVSP_ret[index(PETR4.SA)%in%index(BVSP_ret)])
# Plotar os mesmos dias dos rtornos
BVSP_same <- BVSP_ret[index(BVSP_ret)%in%index(PETR4.SA)]
PETR_same <- BVSP_same <- PETR_ret[index(PETR_ret)%in%index(BVSP_ret)]
# Retornos acumulados
BVSP_Acum <- cumsum(BVSP_ret)
plot(index(BVSP_Acum), coredata(BVSP_Acum), type = 'l', main = "Ibov acumulado")
PETR_Acumul <- cumsum(PETR_ret)
plot(index(PETR_Acumul), coredata(PETR_Acumul), type = 'l', main = "Ibov acumulado")
plot(index(PETR_Acumul), coredata(PETR_Acumul), type = 'l', main = PETR_Acumul+" acumulado")
plot(index(PETR_Acumul), coredata(PETR_Acumul), type = 'l', main = "",PETR_Acumul," acumulado")
plot(index(PETR_Acumul), coredata(PETR_Acumul), type = 'l', main = "PETR acumulado")
plot(coredata(PETR_same), coredata(BVSP_same))
fit_RET_BVSP_PETR <- lm(BVSP_same, PETR_same)
fit_RET_BVSP_PETR <- lm(BVSP_same-PETR_same)
fit_RET_BVSP_PETR <- lm(BVSP_same~PETR_same)
abline(h=median(BVSP_same), col = "blue")
abline(h=median(PETR_same), col = "red")
abline(h=median(fit_RET_BVSP_PETR), col = "green")
abline(h=median(fit_RET_BVSP_PETR), col = "green")
fit_RET_BVSP_PETR <- lm(BVSP_same~PETR_same) #Retorno do indice em funcao do retorno do ativo
abline(h=median(BVSP_same), col = "blue")
abline(h=median(PETR_same), col = "red")
abline(h=median(fit_RET_BVSP_PETR), col = "green")
abline(fit_RET_BVSP_PETR, col = "green")
summary(fit_RET_BVSP_PETR)
# Periodo de analise
start_date <- as.Date("2020-01-01")
end_date<- as.Date("2020-07-13")
ATIVO <- "TIMP3.SA"
# Ativos
tickers <- c("^BVSP", ATIVO)
# Captura dos dados
getSymbols(tickers, src="yahoo", from = start_date, to = end_date)
# Calculando retornos
BVSP_ret = dailyReturn(BVSP)
ATIVO_ret = dailyReturn(ATIVO)
# Calculando retornos
BVSP_ret = dailyReturn(BVSP)
ATIVO_ret = dailyReturn(ATIVO)
# funcoes auxiliares
index(BVSP_ret)
coredata(BVSP_ret)
length(BVSP_ret)
index(ATIVO_RET)
ATIVO_ret = dailyReturn(TIMP3.SA)
# funcoes auxiliares
index(BVSP_ret)
index(ATIVO_RET)
# Periodo de analise
start_date <- as.Date("2020-01-01")
end_date<- as.Date("2020-07-13")
# Ativos
tickers <- c("^BVSP", "TIMP3.SA")
# Captura dos dados
getSymbols(tickers, src="yahoo", from = start_date, to = end_date)
# Calculando retornos
BVSP_ret = dailyReturn(BVSP)
ATIVO_ret = dailyReturn(TIMP3.SA)
View(ATIVO_ret)
View(ATIVO_ret)
setwd("D:/Projetos_em_R")
install.packages("Plumber", dependencies = TRUE)
install.packages("plumber", dependencies = TRUE)
setwd("D:/Projetos_em_R/Machine_Learning/Classificacao/Arvore_decisao")
library(rpart)
base <- read.csv('risco_credito.csv')
classificador <- rpart(formula = risco ~ ., data = base)
print(classificador)
classificador <- rpart(formula = risco ~ ., data = base,
control = rpart.control(minbucket = 1))
print(classificador)
plot(classificador)
plot(classificador)
text(classificador)
library(rpart.plot)
install.packages("rpart.plot", dependencies = TRUE)
library(rpart.plot)
rpart.plot(classificador)
historia <- c('ruim')
divida <- c('alta')
garantias <- c('nenhuma')
renda <- c('>15')
df <- data.frame(historia, divida, garantias, renda)
historia <- c('boa', 'ruim')
divida <- c('alta', 'alta')
garantias <- c('nenhuma', 'adequada')
renda <- c('acima_35', '>15')
df <- data.frame(historia, divida, garantias, renda)
View(df)
View(df)
previsao <- predict(classificador, newdata = df)
print(previsao)
# Previsao
previsao <- predict(classificador, newdata = df)
# Encode da classe
base$risco <- factor(base$risco, levels = c(0, 1, 2))
# Previsao
previsao <- predict(classificador, newdata = df)
print(previsao)
library(rpart)
library(rpart.plot)
base <- read.csv('risco_credito.csv')
classificador <- rpart(formula = risco ~ ., data = base,
control = rpart.control(minbucket = 1))
print(classificador)
rpart.plot(classificador)
historia <- c('boa', 'ruim')
divida <- c('alta', 'alta')
garantias <- c('nenhuma', 'adequada')
renda <- c('acima_35', '>15')
df <- data.frame(historia, divida, garantias, renda)
# Previsao
previsao <- predict(classificador, newdata = df)
View(df)
View(df)
View(base)
View(base)
historia <- c('boa', 'ruim')
divida <- c('alta', 'alta')
garantias <- c('nenhuma', 'adequada')
renda <- c('acima_35', '0_15')
df <- data.frame(historia, divida, garantias, renda)
# Previsao
previsao <- predict(classificador, newdata = df)
print(previsao)
library(rpart)
library(rpart.plot)
base <- read.csv('risco_credito.csv')
classificador <- rpart(formula = risco ~ ., data = base,
control = rpart.control(minbucket = 1))
print(classificador)
rpart.plot(classificador)
# historia: boa, divida: alta, garantias: nenhuma, renda > 35
# historia: ruim, divida: alta, garantias: adequada, renda < 15
# Criando Dataframe
historia <- c('boa', 'ruim')
divida <- c('alta', 'alta')
garantias <- c('nenhuma', 'adequada')
renda <- c('acima_35', '0_15')
df <- data.frame(historia, divida, garantias, renda)
# Encode da classe
base$risco <- factor(base$risco, levels = c(0, 1, 2))
# Previsao
previsao <- predict(classificador, newdata = df)
print(previsao)
library(rpart)
library(rpart.plot)
library(caTools)
base <- read.csv("credit_data.csv")
base$clientid <- NULL
summary(base)
# Tratando dados inconsistentes
# Verificando idades negativas
idades_invalidas <- base[base$age < 0 & !is.na(base$age), ]
base$age <- ifelse(base$age < 0, mean(base$age[base$age > 0], na.rm = TRUE), base$age)
# Verificando valores faltantes
base[is.na(base$age), ]
base$age <- ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
# Escalonamento (normalizacao) dos dados
base[, 1:3] <- scale(base[, 1:3])
# Separacao de bases de treinamento e testes
set.seed(1)
divisao <- sample.split(base$default, SplitRatio = 0.75)
base_treinamento <- subset(base, divisao == TRUE)
base_teste <- subset(base, divisao == FALSE)
# Aprendizado
classificador <- rpart(formula = default ~ ., data = base_treinamento)
rpart.plot(classificador)
print(classificador)
# Previsoes
previsoes <- predict(classificador, newdata = base_teste[-4])
previsoes
idades_invalidas <- base[base$age < 0 & !is.na(base$age), ]
base$age <- ifelse(base$age < 0, mean(base$age[base$age > 0], na.rm = TRUE), base$age)
# Verificando valores faltantes
base[is.na(base$age), ]
base$age <- ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
# Escalonamento (normalizacao) dos dados
base[, 1:3] <- scale(base[, 1:3])
# Encode da classe
base$default <- factor(base$default, levels = c(0, 1))
# Separacao de bases de treinamento e testes
set.seed(1)
divisao <- sample.split(base$default, SplitRatio = 0.75)
base_treinamento <- subset(base, divisao == TRUE)
base_teste <- subset(base, divisao == FALSE)
# Aprendizado
classificador <- rpart(formula = default ~ ., data = base_treinamento)
print(classificador)
rpart.plot(classificador)
# Previsoes
previsoes <- predict(classificador, newdata = base_teste[-4])
previsoes
View(previsoes)
View(previsoes)
# Previsoes
previsoes <- predict(classificador, newdata = base_teste[-4], type = 'class')
previsoes
# Matriz confusao
matriz_confusao <- table(base_teste[, 4], previsoes)
matriz_confusao
print(matrix)
print(matriz_confusao)
library(caret)
# Estatisticas
confusionMatrix(matriz_confusao)
library(caTools)
library(caret)
library(rpart)
library(rpart.plot)
base = read.csv('census.csv')
base$X = NULL
summary(base)
# Transformacao de variaveis categoricas
table(base$sex)
unique(base$sex)
base$sex = factor(base$sex, levels = c(' Female', ' Male'), labels = c(0, 1))
base[is.na(base$sex)]
base$workclass = factor(base$workclass, levels = c(' Federal-gov', ' Local-gov', ' Private', ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$education = factor(base$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
base$marital.status = factor(base$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$occupation = factor(base$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
base$relationship = factor(base$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
base$race = factor(base$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
base$native.country = factor(base$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
base$income = factor(base$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
# Escalonamento (Normalizacao)
base[, 1] = scale(base[, 1])
base[, 3] = scale(base[, 3])
base[, 5] = scale(base[, 5])
base[, 11:13] = scale(base[, 11:13])
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.85)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
library(caTools)
library(caret)
library(rpart)
library(rpart.plot)
base = read.csv('census.csv')
base$X = NULL
summary(base)
# Transformacao de variaveis categoricas
table(base$sex)
unique(base$sex)
base$sex = factor(base$sex, levels = c(' Female', ' Male'), labels = c(0, 1))
base[is.na(base$sex)]
base$workclass = factor(base$workclass, levels = c(' Federal-gov', ' Local-gov', ' Private', ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$education = factor(base$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
base$marital.status = factor(base$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$occupation = factor(base$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
base$relationship = factor(base$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
base$race = factor(base$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
base$native.country = factor(base$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
base$income = factor(base$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
# Escalonamento (Normalizacao)
base[, 1] = scale(base[, 1])
base[, 3] = scale(base[, 3])
base[, 5] = scale(base[, 5])
base[, 11:13] = scale(base[, 11:13])
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.85)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
# Treinamento do Modelo
classificador <- rpart(formula = income ~., data = base_treinamento)
print(classificador)
plot(classificador)
rpart.plot(classificador)
View(base_teste)
View(base_teste)
# Previsoes
previsoes <- predict(classificador, newdata = base_teste[-15], type = 'class')
previsoes
# Matriz confusao
matriz_confusao <- table(base_teste[, 15], previsoes)
print(matriz_confusao)
# Estatisticas
confusionMatrix(matriz_confusao)
library(caTools)
library(caret)
library(rpart)
library(rpart.plot)
base = read.csv('census.csv')
base$X = NULL
summary(base)
# Transformacao de variaveis categoricas
table(base$sex)
unique(base$sex)
base$sex = factor(base$sex, levels = c(' Female', ' Male'), labels = c(0, 1))
base[is.na(base$sex)]
base$workclass = factor(base$workclass, levels = c(' Federal-gov', ' Local-gov', ' Private', ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$education = factor(base$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
base$marital.status = factor(base$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$occupation = factor(base$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
base$relationship = factor(base$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
base$race = factor(base$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
base$native.country = factor(base$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
base$income = factor(base$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
# Escalonamento (Normalizacao)
base[, 1] = scale(base[, 1])
base[, 3] = scale(base[, 3])
base[, 5] = scale(base[, 5])
base[, 11:13] = scale(base[, 11:13])
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.85)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
# Treinamento do Modelo
classificador <- rpart(formula = income ~., data = base_treinamento)
print(classificador)
rpart.plot(classificador)
poda <- classificador$cptable[wich.min(classificador$cptable[, "xerror"]), "CP"]
library(rpart)
poda <- classificador$cptable[wich.min(classificador$cptable[, "xerror"]), "CP"]
poda <- classificador$cptable[which.min(classificador$cptable[, "xerror"]), "CP"]
prune(classificador, poda)
setwd("D:/Projetos_em_R/Machine_Learning/Classificacao/Arvore_decisao/Random_Forest")
base = read.csv('D:\Projetos_em_R\Machine_Learning\Classificacao\Arvore_decisao\census.csv')
base = read.csv(r'D:\Projetos_em_R\Machine_Learning\Classificacao\Arvore_decisao\census.csv')
base = read.csv('D:/Projetos_em_R/Machine_Learning/Classificacao/Arvore_decisao/census.csv')
install.packages("randomForest", dependencies = TRUE)
library(randomForest)
library(caTools)
library(caret)
library(randomForest)
library(rpart.plot)
base = read.csv('D:/Projetos_em_R/Machine_Learning/Classificacao/Arvore_decisao/credit_data.csv')
base$clientid <- NULL
summary(base)
# Tratando dados inconsistentes
# Verificando idades negativas
idades_invalidas <- base[base$age < 0 & !is.na(base$age), ]
base$age <- ifelse(base$age < 0, mean(base$age[base$age > 0], na.rm = TRUE), base$age)
# Verificando valores faltantes
base[is.na(base$age), ]
base$age <- ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
# Escalonamento (normalizacao) dos dados
base[, 1:3] <- scale(base[, 1:3])
# Encode da classe
base$default <- factor(base$default, levels = c(0, 1))
# Separacao de bases de treinamento e testes
set.seed(1)
divisao <- sample.split(base$default, SplitRatio = 0.75)
base_treinamento <- subset(base, divisao == TRUE)
base_teste <- subset(base, divisao == FALSE)
# Treinamento
classificador <- randomForest(x = base_treinamento[-4], y = base_treinamento$default,
n_tree = 10)
# Previsoes
previsoes = predict(classificador, newdata = base_teste[-4])
previsoes
matriz_confusao <- table(base_teste[ , 4], previsoes)
matriz_confusao
print(matriz_confusao)
confusionMatrix(matriz_confusao)
library(caTools)
library(caret)
library(randomForest)
library(rpart.plot)
base = read.csv('D:/Projetos_em_R/Machine_Learning/Classificacao/Arvore_decisao/credit_data.csv')
base$clientid <- NULL
summary(base)
# Tratando dados inconsistentes
# Verificando idades negativas
idades_invalidas <- base[base$age < 0 & !is.na(base$age), ]
base$age <- ifelse(base$age < 0, mean(base$age[base$age > 0], na.rm = TRUE), base$age)
# Verificando valores faltantes
base[is.na(base$age), ]
base$age <- ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
# Escalonamento (normalizacao) dos dados
base[, 1:3] <- scale(base[, 1:3])
# Encode da classe
base$default <- factor(base$default, levels = c(0, 1))
# Separacao de bases de treinamento e testes
set.seed(1)
divisao <- sample.split(base$default, SplitRatio = 0.75)
base_treinamento <- subset(base, divisao == TRUE)
base_teste <- subset(base, divisao == FALSE)
# Treinamento
classificador <- randomForest(x = base_treinamento[-4], y = base_treinamento$default,
n_tree = 10)
rpart.plot(classificador)
library(caTools)
library(caret)
library(randomForest)
base = read.csv('D:/Projetos_em_R/Machine_Learning/Classificacao/Arvore_decisao/credit_data.csv')
base$clientid <- NULL
summary(base)
# Tratando dados inconsistentes
# Verificando idades negativas
idades_invalidas <- base[base$age < 0 & !is.na(base$age), ]
base$age <- ifelse(base$age < 0, mean(base$age[base$age > 0], na.rm = TRUE), base$age)
# Verificando valores faltantes
base[is.na(base$age), ]
base$age <- ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
# Escalonamento (normalizacao) dos dados
base[, 1:3] <- scale(base[, 1:3])
# Encode da classe
base$default <- factor(base$default, levels = c(0, 1))
# Separacao de bases de treinamento e testes
set.seed(1)
divisao <- sample.split(base$default, SplitRatio = 0.75)
base_treinamento <- subset(base, divisao == TRUE)
base_teste <- subset(base, divisao == FALSE)
# Treinamento
classificador <- randomForest(x = base_treinamento[-4], y = base_treinamento$default,
n_tree = 10)
# Previsoes
previsoes <- predict(classificador, newdata = base_teste[-4])
matriz_confusao <- table(base_teste[ , 4], previsoes)
print(matriz_confusao)
confusionMatrix(matriz_confusao)
library(caTools)
library(caret)
library(randomForest)
base = read.csv('D:/Projetos_em_R/Machine_Learning/Classificacao/Arvore_decisao/census.csv')
base$X = NULL
summary(base)
# Transformacao de variaveis categoricas
table(base$sex)
unique(base$sex)
base$sex = factor(base$sex, levels = c(' Female', ' Male'), labels = c(0, 1))
base[is.na(base$sex)]
base$workclass = factor(base$workclass, levels = c(' Federal-gov', ' Local-gov', ' Private', ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$education = factor(base$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
base$marital.status = factor(base$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$occupation = factor(base$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
base$relationship = factor(base$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
base$race = factor(base$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
base$native.country = factor(base$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
base$income = factor(base$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
# Escalonamento (Normalizacao)
base[, 1] = scale(base[, 1])
base[, 3] = scale(base[, 3])
base[, 5] = scale(base[, 5])
base[, 11:13] = scale(base[, 11:13])
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.85)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
View(base)
View(base)
# Treinamento
classificador <- randomForest(x = base_treinamento[-15], y= base_treinamento$income,
n_tree = 10)
# Previsoes
previsores <- predict(classificador, newdata = base_teste[-15])
matriz_confusao <- table(base_teste[ , 15], previsoes)
# Previsoes
previsoes <- predict(classificador, newdata = base_teste[-15])
matriz_confusao <- table(base_teste[ , 15], previsoes)
print(matriz_confusao)
confusionMatrix(matriz_confusao)
